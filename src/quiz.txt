1. What do propshelp us accomplish?
ANS: Makes a component more reusable

2. How do you pass a prop into a component?
ANS: <MyAwesomeHeader title="???" />

3. Can I pass a custom prop (e.g. 'blalalalala={true}') to a native
   DOM element? (e.g. <div blalalalala={true}/>) Why or why not?
   ANS: No, because the JSXwe useto describe native DOM elements will
        be turned into REAL DOM elements by React. and real DOM elements
        only have the properties/attributes specified in the HTML specification.
        (Which doesn't include properties like 'blalalalala')

4. How do I receive props in a component
   function Navbar(props){
    console.log(props.blalalala)
    return(
        <header>
            ...
        </header>
    )
   }
   ANS:

5. What data type is 'props' when the component receives it?
Object



QUIZ: Turn the below string array into an array of JSX elements by surrounding each ninja turle with an <h2> element
export default function App() {
  const ninjaTurtles = ["Donatello", "Michaelangelo", "Rafael", "Leonardo"]
  return (
    <main>
      {ninjaTurtles}
    </main>
  )
}

SOLUTION:
Just wrap each  string array inside the <h2></h2> element



QUIZ:
1. What does the `.map()` array method do?
ANS: It returns an array. Whatever gets returned from the callback function provided is placed at the same index in the new array. Usually we take the items from the original array and modify them in some way.

2. What do we usually use `.map()` for in React?
ANS: Convert an array of raw data into an array of JSX elements that can be displayed on the page.

3. Critical thinking: why is using `.map()` better than just creating the components manually by typing them out?
ANS: We often don't have the data ahead of time when we're building tha app, so we simply can't manually type them out.
     It makes our code more "self-sustaining" - not requiring additional changes to the code whenever the data changes.